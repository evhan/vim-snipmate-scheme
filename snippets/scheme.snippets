snippet lam
	(lambda (${1:formals})
		${2:body})
snippet cl
	(case-lambda
	  ((${1:first})
	   ${2:body}))
snippet let
	(let ((${1:name} ${2:declaration}))
		${3:body})
snippet def
	(define (${1:name} ${2:args})
		${3:code})
snippet beg
	(begin
	  ${1:body})
snippet if
	(if ${1:conditional}
	    ${2:true}
			${3:false})
snippet cond
	(cond 
		((${1:condition1}) ${2:body})
		((${3:condition2}) ${4:body})
		(else (${5:else})))
snippet case
	(case ${1:exp0}
		((${2:key}) ${3:body})
		((${4:key}) ${5:body})
		(else)  ${6:exp1} exp2)
snippet cc
	(call/cc
		(lambda (k)
			${1:body}))
snippet param
	(define ${1:name} (make-parameter ${2:value}))
