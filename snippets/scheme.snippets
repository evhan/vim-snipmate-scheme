# binding

snippet lam
	(lambda (${1:formals})
		(${2:exp}))

# local binding

snippet let one declaration
	(let ((${1:name} ${2:declaration}))
		${3:body})
snippet let two declarations
	(let ((${1:name1} ${2:declaration1})
				(${3:name2} ${4:declaration2}))
		${5:body})
snippet let three declarations
	(let ((${1:name1} ${2:declaration1})
				(${3:name2} ${4:declaration2})
				(${5:name3} ${6:declaration3}))
		${7:body})

# variable definitions

snippet def regular
	(define (${1:name} ${2:args})
		${3:code})
snippet def lambda
	(define ${1:name}
		(lambda (${2:args})
			${3:code}))

# procedure application
snippet proc
	(${1:procedure} ${2:args})

snippet beg
	(begin${1:exp1} ${2:exp2})
	
# Conditionals
snippet if
	(if ${1:conditional} ${2:true} ${3:false})

snippet cond
	(cond 
		((${1:condition1}) (${2:code1}))
		((${3:condition2}) (${4:code2}))
		(else (${5:else})))

# boolean tests
snippet eq eq?
	(eq? (${1:s-exp}) (${2:s-exp}))
snippet eq eqv?
	(eqv? (${1:s-exp}) (${2:s-exp}))
snippet eq equal?
	(equal? (${1:s-exp}) (${2:s-exp}))

snippet and
	(and (${1:s-exp}) (${2:s-exp}))

snippet or
	(or (${1:s-exp}) (${2:s-exp}))
